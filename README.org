#+TITLE: nix-config
Configuration for NixOS and user home (dot files). It is provided via Nix flakes and
includes the following components:

- apps :: commands to run to utilize the flake or for development.
  - ~home-switch~ :: run the =home-manager= switch command for this flake.
  - ~nixos-switch~ :: run the =nixos-rebuild= switch command for this flake.
  - ~use-caches~ :: add caches to project =nix.conf=. Only needed when modifying the caches.
  - ~install-qutebrowser-dicts~ :: install dictionaries to be used within qutebrowser.
  - ~backup~ :: backup fish history and GnuPG sshcontrol.
- devShells :: developer shells
  - default :: a shell with tools used for development and required setup for flakes.
- lib :: library functions to be used with flakes or within Nix.
  - ~kebabCaseToCamelCase~ :: convert kebab case to camel case (hello-world -> helloWorld)
  - ~importDirToAttrs~ :: given a directory import all files into a set corresponding to
    each file name.
  - ~pkgsForSystem~ :: import the input nixpkgs with overlays provided by this flake for a system.
  - ~forAllSystem~ :: create an attrset by all the supported systems and runs a function
    which receives the packages for that system.
  - ~nixosSystem~ :: wrapper around the corresponding function in nixpkgs which integrates
    packages, overlays, NixOS modules, Home Manager modules from this flake.
  - ~nixosSystemFor~ :: helper function to build configuration for target host, this can
    be an input for another flake where you can extend the host configuration (e.g. I use
    it for my private configuration additions).
  - ~homeManagerConfiguration~ :: wrapper around the corresponding function in Home Manager
    that adds modules from this flake and enables generic Linux support in case it is a
    Linux machine (assuming NixOS users would use the NixOS intergarion instead.)
- homeConfigurations :: user configuration for [[https://github.com/nix-community/home-manager][Home Manager]].
- homeManagerModules :: modules that can be used together with [[https://github.com/nix-community/home-manager][Home Manager]].
  - custom-defaultBrowser :: configure a default browser.
  - custom-keybindings :: enable vi/emacs keybindings across the system.
  - profiles-development :: development profile module.
  - profiles-gnome :: configure gnome (e.g. disable gnome-keyring-ssh).
  - profiles-highContrast :: enable high contrast where possible.
  - programs-editorconfig :: configure [[https://editorconfig.org][editorconfig]].
  - programs-gnomeShell :: gnome-shell configuration module.
  - programs-ripgrep :: configure ripgrep.
  - targets-genericLinux :: fixes for generic Linux module.
- nixosConfigurations :: host configurations for [[https://github.com/NixOS/nixpkgs][NixOS]].
- nixosModules :: modules that can be used together with [[https://github.com/NixOS/nixpkgs][NixOS]].
  - custom-dictionaries :: configure dictionaries (both aspell and hunspell) via one setting.
  - custom-i18n :: configure internationalization.
  - custom-keyboard :: configure keyboard for console, kmscon and xserver via one setting.
  - custom-shell :: configure shell environment.
- overlays :: custom overlays.
  - default :: package overlay including the mentioned packages.
  - iosevka :: iosevka configured with the slab set.
- packages :: packages not in the default nixpkgs.
  - [[https://github.com/TylerBrock/saw][saw]]

* Usage
Show what is provided:
#+BEGIN_SRC sh
nix flake show
#+END_SRC

Switch both system (NixOS) and home:
#+BEGIN_SRC sh
nix run .#nixos-switch
#+end_src

Switch home only:
#+BEGIN_SRC sh
nix run .#home-switch
#+end_src

Update all inputs:
#+BEGIN_SRC sh
nix flake update --commit-lock-file
#+end_src

Update a single input:
#+BEGIN_SRC sh
nix flake lock --update-input nixpkgs --commit-lock-file
#+end_src

* Development
Use a local input during development:
#+begin_src sh
nix flake lock --override-input nixpkgs path:../nixpkgs
#+end_src

* Non-NixOS
** Default shell
If you use a custom shell, you need to manually set the default shell, this is done by:
#+BEGIN_SRC sh
echo $HOME/.nix-profile/bin/fish | sudo tee -a /etc/shells
chsh -s $HOME/.nix-profile/bin/fish
#+END_SRC

* YubiKey ISO
Used to create a safe environment for YubiKey operations having all the necessary tools.

Build the ISO:
#+begin_src sh
nix build -L .#yubikeyInstallerImage
#+end_src

Copy the ISO to a USB-key/storage device:
#+begin_src sh
sudo dd if=result/iso/*.iso of=/dev/sda status=progress
sync
#+end_src

* Tasks
** TODO Extract some inline stuff into external files
** TODO GC helpers?
** TODO Home manager config for qutebrowser + dicts
** TODO Look into if more PA config is needed:
- [[https://github.com/dejanr/dotfiles/blob/ef9c27cf93a17e0af4bdf5cc378d2808b5326afa/nix/config/nixpkgs/roles/multimedia.nix#L35][Sample]]
** TODO Nest/group modules
** TODO Script to regenerate hardware-config for current host
** TODO Make YubiKey steps into an flake app
